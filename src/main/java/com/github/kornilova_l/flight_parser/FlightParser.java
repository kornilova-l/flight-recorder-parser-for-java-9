package com.github.kornilova_l.flight_parser;

import com.oracle.jmc.common.item.IItem;
import com.oracle.jmc.common.item.IItemCollection;
import com.oracle.jmc.common.item.IItemIterable;
import com.oracle.jmc.flightrecorder.CouldNotLoadRecordingException;
import com.oracle.jmc.flightrecorder.JfrLoaderToolkit;
import com.oracle.jmc.flightrecorder.internal.parser.v1.JfrFrameAccessor;

import java.io.File;
import java.io.IOException;
import java.util.Map;

/**
 * FlightParser parses jfr files that were generated by Java 9 Flight Recorder.
 * As a result it generates stacks: Map<String, Integer>
 * where key is a stack (method calls are separated by semicolon
 * and value is how many times this stack was present in the jfr file.
 */
public class FlightParser {
    private Map<String, Integer> stacks;

    /**
     * @param file jfr file
     */
    public FlightParser(File file) {
        validateFile(file);
        try {
            IItemCollection collection = JfrLoaderToolkit.loadEvents(file);
            buildStacks(collection);
        } catch (IOException | CouldNotLoadRecordingException e) {
            e.printStackTrace();
        }
    }

    private void validateFile(File file) {
        if (!file.exists()) {
            throw new IllegalArgumentException("File " + file + " does not exist");
        }
        if (!file.isFile()) {
            throw new IllegalArgumentException(file + " is not a file");
        }
    }

    private void buildStacks(IItemCollection collection) {
        try {
            JfrFrameAccessor jfrFrameAccessor = new JfrFrameAccessor();
            for (IItemIterable iItems : collection) {
                if (iItems.getItemCount() == 0L || !iItems.getType().toString().contains("ExecutionSample")) {
                    continue;
                }
                for (IItem iItem : iItems) {
                    String stack = jfrFrameAccessor.getStack(iItem);
                }
            }
        } catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException e) {
            /* reflection warns about lots of exceptions */
            e.printStackTrace();
        }
    }
}
